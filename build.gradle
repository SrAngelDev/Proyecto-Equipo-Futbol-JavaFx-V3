plugins {
    id 'java'
    id 'application'
    id 'org.jetbrains.kotlin.jvm' version '1.9.23'
    id 'org.javamodularity.moduleplugin' version '1.8.12'
    id 'org.openjfx.javafxplugin' version '0.0.13'
    id 'org.beryx.jlink' version '2.25.0'
    id 'org.jetbrains.kotlin.plugin.serialization' version '1.9.23' // Kotlin Serialization
    id 'jacoco'
}

group 'srangeldev'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

ext {
    junitVersion = '5.10.2'
}


tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

application {
    mainModule = 'srangeldev.proyectoequipofutboljavafx'
    mainClass = 'srangeldev.proyectoequipofutboljavafx.NewTeamApplication'
}
kotlin {
    jvmToolchain(21)
}

javafx {
    version = '21'
    modules = ['javafx.controls', 'javafx.fxml']
}

dependencies {
    implementation("io.github.pdvrieze.xmlutil:serialization-jvm:0.86.0")

    // Logger
    implementation("org.lighthousegames:logging:1.5.0")
    implementation('ch.qos.logback:logback-classic:1.5.13')

    // BBDD
    implementation("org.xerial:sqlite-jdbc:3.49.1.0")
    implementation("org.mybatis:mybatis:3.5.19") // Scripts de bases de datos

    // JDBI
    implementation("org.jetbrains.kotlin:kotlin-reflect") // Necesario para JDBI la reflexión
    implementation("org.jdbi:jdbi3-core:3.48.0") // Core
    implementation("org.jdbi:jdbi3-sqlobject:3.48.0") // SQL Object para DAO
    implementation("org.jdbi:jdbi3-kotlin:3.48.0") // Kotlin extension
    implementation("org.jdbi:jdbi3-kotlin-sqlobject:3.48.0") // Kotlin extension para SQL Object
    implementation("org.jetbrains.kotlin:kotlin-stdlib:1.9.23")




    // Librería para serialización en JSON
    implementation("org.jetbrains.kotlinx:kotlinx-serialization-json:1.6.0")
    // Librería para serialización en XML
    implementation("io.github.pdvrieze.xmlutil:serialization-jvm:0.86.0")

    // Result
    implementation("com.michael-bull.kotlin-result:kotlin-result:2.0.0")

    // Open Browser
    implementation("com.vaadin:open:8.5.0.4")

    // Informe PDF
    implementation("com.itextpdf:itextpdf:5.5.13.4")

    // Cache Caffeine
    implementation("com.github.ben-manes.caffeine:caffeine:3.2.0")

    // Koin
    implementation(platform("io.insert-koin:koin-bom:3.5.6"))
    implementation("io.insert-koin:koin-core") // Core


    testImplementation("org.junit.jupiter:junit-jupiter-api:${junitVersion}")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")

    testImplementation("org.mockito.kotlin:mockito-kotlin:5.3.1")
    testImplementation("org.mockito:mockito-junit-jupiter:5.12.0")


    // Jacoco
    implementation("org.jacoco:org.jacoco.core:0.8.12")
    testImplementation "org.jetbrains.kotlin:kotlin-test:1.9.23"
}

test {
    useJUnitPlatform()
    finalizedBy(tasks.jacocoTestReport)
    // Con abrimos junit para que pueda usar todo, incluso los de Kotlin
    jvmArgs(
             "--add-opens", "java.base/java.lang=ALL-UNNAMED",
             "--add-opens", "java.base/java.util=ALL-UNNAMED",
             "--add-opens", "java.base/java.sql=ALL-UNNAMED",
             "--add-opens", "java.base/java.time=ALL-UNNAMED",
             "--add-opens", "java.base/java.io=ALL-UNNAMED",
             "--add-opens", "java.base/java.nio.file=ALL-UNNAMED",
             "--add-opens", "java.base/java.net=ALL-UNNAMED",
             "--add-opens", "java.base/java.util.concurrent=ALL-UNNAMED",
             "--add-opens", "java.base/java.text=ALL-UNNAMED",
             "--add-opens", "java.sql/java.sql=ALL-UNNAMED",
             "--add-opens", "java.desktop/java.awt.font=ALL-UNNAMED",
             "--add-opens", "srangeldev.proyectoequipofutboljavafx/srangeldev.proyectoequipofutboljavafx.newteam.repository=ALL-UNNAMED",
             "--add-reads", "org.junit.jupiter.api=kotlin.stdlib",
             "--add-reads", "srangeldev.proyectoequipofutboljavafx=kotlin.test"
     )
}

run {
    jvmArgs = [
            "--add-opens", "srangeldev.proyectoequipofutboljavafx.newteam.models/kotlin.reflect=ALL-UNNAMED"
    ]
}

jlink {
    imageZip = project.file("${buildDir}/distributions/app-${javafx.platform.classifier}.zip")
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    launcher {
        name = 'app'
    }
}

jlinkZip {
    group = 'distribution'
}

// Jar ejecutable

jar {
    manifest {
        attributes 'Main-Class': 'srangeldev.proyectoequipofutboljavafx.NewTeamApplication'
    }
    from {
        configurations["compileClasspath"].collect { it.isDirectory() ? it : zipTree(it) }
    }
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

jacocoTestReport {
    dependsOn test

    reports {
        xml.required = false
        csv.required = false
        html.required = true
        html.outputLocation = layout.buildDirectory.dir("jacocoHtml") // Ubicación del reporte HTML
    }

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    "**/dto/**",
                    "**/models/**",
                    "**/model/**",
                    "**/exception/**",
                    "**/error/**",
                    "**/di/**",
                    "**/controllers/**",
                    "**/viewmodels/**",
                    "**/cache/**",
                    "**/database/**",
                    "**/config/**",
                    "**/controller/**",
                    "**/routes/**",
                    "**/Main**",
                    "**/NewTeamApplication.class",
                    "**/NewTeamApplication\$*.class",
                    "**/NewTeamApplicationKt.class",
                    "**/NewTeamApplication\$*.class",
                    "**/NewTeamApplication.class",
                    "**/NewTeamApplicationKt.class",
                    "**/exceptions/**",
                    "**/services/PersonalService.class",
                    "**/services/PersonalService\$DefaultImpls.class",
                    "**/PersonalService.*",
                    "**/PersonalService\$*",
                    "**/PersonalService\$DefaultImpls*",
                    "**/dao/PersonaEntity.class",
                    "**/dao/PersonalEntity.class",
                    "**/dao/UserEntity.class",
                    "**/dao/JugadorConvocadoEntity.class",
                    "**/exceptions/**",
                    "**/*\$DefaultImpls*"
            ])
        }))

        sourceDirectories.setFrom(files(
                "src/main/kotlin",
                "src/main/java",
                "src/test/kotlin"
        ))
    }
}
/*
jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.2 // 20% de cobertura mínima
            }
        }
    }
}*/

task testCoverage(group: 'verification', description: 'Runs the unit tests with coverage') {
    dependsOn test,
            jacocoTestReport,
            jacocoTestCoverageVerification
}

// Asegurar que Kotlin compile antes que Java
compileJava.dependsOn compileKotlin

// Fusionar las clases Kotlin en el mismo output que Java
tasks.named('compileKotlin') {
    kotlinOptions {
        destinationDirectory.set(file("build/classes/java/main"))
    }
}
// Opcional pero recomendado: limpiar el proyecto completo
clean {
    delete "build"
}
